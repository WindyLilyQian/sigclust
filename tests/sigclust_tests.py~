
def sig_test1(shape, iters = 20):
    result = np.zeros(iters)
    for i in np.arange(iters):
        X = np.random.rand(shape[0], shape[1])
        p = sigclust(X, verbose = False)[0]
        result[i] = p
    return result




def RSC(file, rids=True, verbose = True, scale = False):
    rid_col, X = get_mat(file, rids = rids)
    while(True):
        p, clust = sigclust(X, verbose = verbose, scale = scale)
        print("p-value: %f" % p)

        s = sum(clust)
        n_samps = X.shape[0]
        print("The clusters have sizes %d, %d" %
              (n_samps - s, s))
        in0 = input("Remove all points in smallest cluster and re-run sigclust?  (Enter 'n' to terminate.):")
        
        if in0 is 'n':
            break

        
        sec_small = s < (n_samps / 2)
        print("Removing %s cluster (of size %d)." %
              ("SECOND" if sec_small else "FIRST",
               s if sec_small else n_samps - s))
        
               

        f_clust = clust.astype(bool)
        if sec_small:
            to_remove = np.where(f_clust)[0]
        else:
            to_remove = np.where(~f_clust)[0]
        print("Now removing samples with the following indices:")
        print(to_remove)
        print("These samples correspond to the following rev ids:")
        rem_rids = rid_col[to_remove]
        
        print(rem_rids)
    
        X = np.delete(X, to_remove, axis = 0)
